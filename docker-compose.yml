# /docker-compose.yml

version: '3.8'

services:
  # Backend Service (Node.js/Express API)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dealx_backend
    restart: unless-stopped
    env_file:
      - ./.env # Load environment variables from .env file in the root
    environment:
      # Ensure NODE_ENV is set, if your app uses it (e.g., for conditional logic)
      NODE_ENV: ${NODE_ENV:-production} # Default to production if not set in .env
      # Database connection details are loaded from .env via env_file
    ports:
      # Map container port 5000 to host port 5000 (adjust host port if needed)
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      db: # Ensure database is ready before backend starts
        condition: service_healthy
    networks:
      - app-network
    volumes:
      # Optional: Mount local code for development (use a separate docker-compose.override.yml for this)
      # - ./backend:/app
      # - /app/node_modules # Prevent host node_modules from overwriting container's

  # Frontend Service (React App served by Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # Optional: Pass build-time args to frontend Dockerfile if needed
      # args:
      #   REACT_APP_API_URL: ${REACT_APP_API_URL}
    container_name: dealx_frontend
    restart: unless-stopped
    ports:
      # Map container port 80 (Nginx) to host port 80 or another port (e.g., 3000)
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend # Frontend depends on backend for API calls
    networks:
      - app-network

  # Database Service (PostgreSQL)
  db:
    image: postgres:16-alpine # Use a specific, recent version
    container_name: dealx_db
    restart: unless-stopped
    env_file:
      - ./.env # Load environment variables from .env file
    environment:
      # PostgreSQL specific variables (loaded from .env via env_file)
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      # Map container port 5432 to host port 5432 (adjust host port if needed)
      - "${DB_PORT:-5432}:5432"
    volumes:
      # Persist database data using a named volume
      - db_data:/var/lib/postgresql/data
      # Mount initialization script (we will create this in the next phase)
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      # Check if PostgreSQL is ready to accept connections
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

# Define named volumes
volumes:
  db_data:
    driver: local # Default driver

# Define networks
networks:
  app-network:
    driver: bridge # Default driver
