{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'axios';import Card from'./Card';import{motion}from'framer-motion';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProductList=()=>{const[products,setProducts]=useState([]);// State to store products\nconst[loading,setLoading]=useState(false);// State to manage loading state\nconst[offset,setOffset]=useState(0);// State to manage offset\nconst[limit]=useState(100);// Set a default limit\nconst loadMoreData=async()=>{if(loading)return;// Prevent loading while a request is in progress\nsetLoading(true);// Set loading to true when making a request\ntry{// Fetch the products with the current offset and limit\nconst response=await axios.get(`http://localhost:5000/api/products?page=${Math.floor(offset/limit)+1}&limit=${limit}`);// Append new products to the existing list\nsetProducts(prevProducts=>[...prevProducts,...response.data.products]);// Update the offset for the next fetch\nsetOffset(prevOffset=>prevOffset+limit);}catch(error){console.error('Error fetching products:',error);}finally{setLoading(false);// Set loading to false once the request is done\n}};useEffect(()=>{// Initial fetch when the component mounts\nloadMoreData();},[]);// Empty array means this runs only once when the component mounts\nuseEffect(()=>{// Add scroll event listener to trigger loadMoreData when user scrolls to bottom\nconst handleScroll=()=>{if(window.innerHeight+document.documentElement.scrollTop>=document.documentElement.offsetHeight-100){loadMoreData();// Load more data when scrolled to the bottom\n}};window.addEventListener('scroll',handleScroll);// Cleanup event listener on component unmount\nreturn()=>{window.removeEventListener('scroll',handleScroll);};},[loading]);// Re-run this effect whenever loading state changes\nreturn/*#__PURE__*/_jsxs(motion.div,{className:\"product-list mainuser\",initial:{opacity:0,y:50},whileInView:{opacity:1,y:0},transition:{duration:0.6},viewport:{once:true}// Trigger animation once when card is in view\n,children:[products.map(product=>/*#__PURE__*/_jsx(Card,{product:product},product.id)),loading&&/*#__PURE__*/_jsx(\"div\",{children:\"Loading more products...\"}),\" \"]});};export default ProductList;","map":{"version":3,"names":["React","useEffect","useState","axios","Card","motion","jsx","_jsx","jsxs","_jsxs","ProductList","products","setProducts","loading","setLoading","offset","setOffset","limit","loadMoreData","response","get","Math","floor","prevProducts","data","prevOffset","error","console","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","div","className","initial","opacity","y","whileInView","transition","duration","viewport","once","children","map","product","id"],"sources":["C:/Users/Abdu Omar/Desktop/SWE/DealX-SWE/frontend/src/ProductList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport axios from 'axios';\r\nimport Card from './Card';\r\nimport { motion } from 'framer-motion';\r\n\r\n\r\nconst ProductList = () => {\r\n  const [products, setProducts] = useState([]);   // State to store products\r\n  const [loading, setLoading] = useState(false);   // State to manage loading state\r\n  const [offset, setOffset] = useState(0);         // State to manage offset\r\n  const [limit] = useState(100);                    // Set a default limit\r\n\r\n  const loadMoreData = async () => {\r\n    if (loading) return;  // Prevent loading while a request is in progress\r\n    \r\n    setLoading(true); // Set loading to true when making a request\r\n    \r\n    try {\r\n      // Fetch the products with the current offset and limit\r\n      const response = await axios.get(`http://localhost:5000/api/products?page=${Math.floor(offset / limit) + 1}&limit=${limit}`);\r\n      \r\n      // Append new products to the existing list\r\n      setProducts((prevProducts) => [...prevProducts, ...response.data.products]);\r\n      \r\n      // Update the offset for the next fetch\r\n      setOffset((prevOffset) => prevOffset + limit);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n    } finally {\r\n      setLoading(false); // Set loading to false once the request is done\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Initial fetch when the component mounts\r\n    loadMoreData();\r\n  }, []); // Empty array means this runs only once when the component mounts\r\n\r\n  useEffect(() => {\r\n    // Add scroll event listener to trigger loadMoreData when user scrolls to bottom\r\n    const handleScroll = () => {\r\n      if (window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight - 100) {\r\n        loadMoreData(); // Load more data when scrolled to the bottom\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('scroll', handleScroll);\r\n    \r\n    // Cleanup event listener on component unmount\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, [loading]); // Re-run this effect whenever loading state changes\r\n\r\n  return (\r\n    <motion.div className=\"product-list mainuser\"\r\n    \r\n    initial={{ opacity: 0, y: 50 }}\r\n    whileInView={{ opacity: 1, y: 0 }}\r\n    transition={{ duration: 0.6 }}\r\n    viewport={{ once: true }} // Trigger animation once when card is in view\r\n  >\r\n    \r\n      {products.map((product) => (\r\n        <Card key={product.id} product={product} />\r\n      ))}\r\n      \r\n      {loading && <div>Loading more products...</div>} {/* Show loading indicator */}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}